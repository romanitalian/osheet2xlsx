name: Security

on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.2'
permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install gosec
      continue-on-error: true
      run: |
        curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.19.0

    - name: Run gosec (SARIF)
      continue-on-error: true
      run: |
        gosec -no-fail -fmt sarif -out gosec.sarif -conf .gosec.yaml ./... || true

    - name: Ensure gosec SARIF exists (non-empty runs)
      run: |
        if [ ! -s gosec.sarif ]; then
          printf '%s\n' '{' \
          '  "version": "2.1.0",' \
          '  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",' \
          '  "runs": [ { "tool": { "driver": { "name": "gosec", "version": "2.19.0" } }, "results": [] } ]' \
          '}' > gosec.sarif
        fi

    - name: Upload SARIF to code scanning
      if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

    - name: Upload gosec report
      uses: actions/upload-artifact@v4
      with:
        name: gosec-report
        path: gosec.sarif
        retention-days: 30

    - name: Run govulncheck
      continue-on-error: true
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck -json ./... > govulncheck.json || echo "govulncheck completed with non-zero exit"

    - name: Upload govulncheck report
      uses: actions/upload-artifact@v4
      with:
        name: govulncheck-report
        path: govulncheck.json
        retention-days: 30

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run static analysis
      run: |
        go vet ./... || echo "go vet completed with exit code $?"

    - name: Check for race conditions
      run: |
        go test -race ./internal/... ./cmd/... || echo "race tests completed with exit code $?"

    - name: Check for memory leaks
      run: |
        go test -memprofile=mem.prof ./internal/... ./cmd/... || echo "memory tests completed with exit code $?"
        if [ -f mem.prof ]; then
          go tool pprof -list=. mem.prof || echo "pprof completed with exit code $?"
          rm -f mem.prof
        fi

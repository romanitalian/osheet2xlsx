name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24.2'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build for multiple platforms
      run: |
        # Linux
        GOOS=linux GOARCH=amd64 go build -o bin/osheet2xlsx-linux-amd64 main.go
        GOOS=linux GOARCH=arm64 go build -o bin/osheet2xlsx-linux-arm64 main.go
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -o bin/osheet2xlsx-darwin-amd64 main.go
        GOOS=darwin GOARCH=arm64 go build -o bin/osheet2xlsx-darwin-arm64 main.go
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -o bin/osheet2xlsx-windows-amd64.exe main.go
        GOOS=windows GOARCH=arm64 go build -o bin/osheet2xlsx-windows-arm64.exe main.go

    - name: Create release archive
      run: |
        mkdir -p release
        cd bin
        for file in osheet2xlsx-*; do
          if [[ "$file" == *.exe ]]; then
            zip "../release/${file%.exe}.zip" "$file"
          else
            tar -czf "../release/${file}.tar.gz" "$file"
          fi
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-release:
    name: Test Release Builds
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build and test
      run: |
        make build
        make test
        make run-example
